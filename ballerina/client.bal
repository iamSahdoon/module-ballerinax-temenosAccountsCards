// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

# API to create, update and manage various types of cards issued to the account
public isolated client class Client {
    final http:Client clientEp;
    final readonly & ApiKeysConfig? apiKeyConfig;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://api.temenos.com/api/v2.0.0//holdings/cards") returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        if config.auth is ApiKeysConfig {
            self.apiKeyConfig = (<ApiKeysConfig>config.auth).cloneReadOnly();
        } else {
            httpClientConfig.auth = <http:CredentialsConfig>config.auth;
            self.apiKeyConfig = ();
        }
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Updates card issue request of an account
    #
    # + cardIssueId - The identifier of the issued card formatted as cardType '.' cardNumber. E.g. VISA.1234567887654321 GC.1111222233334444 AB21.1111111122222222
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + request - body Payload 
    # + return - CardIssueResponse 
    resource isolated function put [string cardIssueId](http:Request request, UpdateCardIssueHeaders headers = {}, *UpdateCardIssueQueries queries) returns CardIssueResponse|error {
        string resourcePath = string `/${getEncodedUri(cardIssueId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["apikey"] = self.apiKeyConfig?.apikey;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Creates card issue request for an account
    #
    # + cardIssueId - The identifier of the issued card formatted as cardType '.' cardNumber. E.g. VISA.1234567887654321 GC.1111222233334444 AB21.1111111122222222
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + request - body Payload 
    # + return - CardIssueResponse 
    resource isolated function post [string cardIssueId](http:Request request, CreateCardIssueHeaders headers = {}, *CreateCardIssueQueries queries) returns CardIssueResponse|error {
        string resourcePath = string `/${getEncodedUri(cardIssueId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["apikey"] = self.apiKeyConfig?.apikey;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Removes an issued card for an account
    #
    # + cardIssueId - The identifier of the issued card formatted as cardType '.' cardNumber. E.g. VISA.1234567887654321 GC.1111222233334444 AB21.1111111122222222
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + request - body Payload 
    # + return - CardIssueResponse 
    resource isolated function delete [string cardIssueId](http:Request request, DeleteCardIssueHeaders headers = {}, *DeleteCardIssueQueries queries) returns CardIssueResponse|error {
        string resourcePath = string `/${getEncodedUri(cardIssueId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["apikey"] = self.apiKeyConfig?.apikey;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->delete(resourcePath, request, httpHeaders);
    }

    # Retrieves issued cards details of an account
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - CardIssuesResponse 
    resource isolated function get .(GetCardIssuesHeaders headers = {}, *GetCardIssuesQueries queries) returns CardIssuesResponse|error {
        string resourcePath = string `/`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["apikey"] = self.apiKeyConfig?.apikey;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }
}
