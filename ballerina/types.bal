// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/constraint;
import ballerina/data.jsondata;
import ballerina/http;

# CardIssuesResponse
public type CardIssuesResponse record {
    QueryHeader header?;
    CardIssuesResponseBody body?;
};

public type ScreenHeader record {
    # The status of the transaction
    string transactionStatus?;
    ScreenHeaderAudit audit?;
    # The Identifier of the record created
    string id?;
    # Status of the API(success/failed)
    string status?;
    # The unique identifier/Message Reference of the record created
    string uniqueIdentifier?;
};

# Represents the Headers record for the operation: getCardIssues
public type GetCardIssuesHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Indicates the pagination header attributes availability. If set to 'true', it fetches all the data
    boolean disablePagination?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type CardIssuesResponseBodyInner_cardNames record {
    # Name of the Cardholder/Customer
    @constraint:String {maxLength: 35}
    string cardName?;
};

public type CardIssuesResponseBodyInner_accountIds record {
    # Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    @constraint:String {maxLength: 16}
    string accountId?;
};

public type CardIssueBodyCardNames record {
    # Name of the Cardholder/Customer
    @constraint:String {maxLength: 35}
    string cardName?;
};

# Represents the Queries record for the operation: deleteCardIssue
public type DeleteCardIssueQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type QueryHeader record {
    ScreenHeaderAudit audit?;
    # The record from which the response should be displayed
    @jsondata:Name {value: "page_start"}
    int:Signed32 pageStart?;
    # The total number of records present
    @jsondata:Name {value: "total_size"}
    int:Signed32 totalSize?;
    # Unique id expected to get as part of response from Transact on every enquiry request
    @jsondata:Name {value: "page_token"}
    string pageToken?;
    # Status of the API(success/failed)
    string status?;
    # The total number of records per page
    @jsondata:Name {value: "page_size"}
    int:Signed32 pageSize?;
};

# Represents the Queries record for the operation: getCardIssues
public type GetCardIssuesQueries record {
    # The date an agreement such as an arrangement, product, credit facility or limit is due to expire
    string expiryDate?;
    # Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    string accountId?;
    # The identifier of the issued card formatted as cardType '.' cardNumber. E.g. VISA.1234567887654321 GC.1111222233334444 AB21.1111111122222222
    string cardIssueId?;
    # The record from which the response should be displayed
    @http:Query {name: "page_start"}
    int:Signed32 pageStart?;
    # Unique id expected to get as part of response from Transact on every enquiry request
    @http:Query {name: "page_token"}
    string pageToken?;
    # The date the item was issued
    string issueDate?;
    # Current status of the Card and following are the possible statuses are  - CARD.ISSUED - CARD.RETURNED - CARD.SCRAP - CARD.CANCEL - NOT.ACTIVATED - NOT.RECEIVED - ACTIVE - BLOCKED - EXPIRED
    string cardStatus?;
    # The total number of records per page
    @http:Query {name: "page_size"}
    int:Signed32 pageSize?;
};

public type CardIssuesResponseBodyInner record {
    # The reason for the cancellation
    @constraint:String {maxLength: 35}
    string cancellationReason?;
    # The identifier of the issued card formatted as cardType '.' cardNumber. E.g. VISA.1234567887654321 GC.1111222233334444 AB21.1111111122222222
    @constraint:String {maxLength: 24}
    string cardIssueId?;
    # Contains the name of the card type such as EURO GOLD, MASTER CARD PLATINUM, VISA TITANIUM
    @constraint:String {maxLength: 35}
    string cardTypeName?;
    # The type of the card, e.g. Visa, Mastercard, etc
    @constraint:String {maxLength: 4}
    string cardType?;
    # The number which is up for display on the credit or debit card
    string cardDisplayNumber?;
    # The date an agreement such as an arrangement, product, credit facility or limit is due to expire
    string expiryDate?;
    # Name of the Cardholder/Customer
    CardIssuesResponseBodyInner_cardNames[] cardNames?;
    # Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    CardIssuesResponseBodyInner_accountIds[] accountIds?;
    # Identifier of the customer
    @constraint:String {maxLength: 10}
    string customerId?;
    # Identifier of the currency. This is the 3-letter ISO 4217 code of the currency
    @constraint:String {maxLength: 3}
    string currencyId?;
    # The date the item was issued
    string issueDate?;
    # Cards issued are defined with an identifier consisting of three elements. The card type, a full stop and the card number. The card number may be any alphanumeric construction, commonly a 16 numeric number is used. VISA.5332870296579001. The id must be in the form of:  CCCC.AAAAAAAAAAAAAAAA  Where CCCC is the card type and AAAAAAAAAAAAAAAA is a unique identifier.  Examples:   VISA.1234567887654321   GC.1111222233334444   AB21.1111111122222222
    string cardNumber?;
    # Current status of the Card and following are the possible statuses are  - CARD.ISSUED - CARD.RETURNED - CARD.SCRAP - CARD.CANCEL - NOT.ACTIVATED - NOT.RECEIVED - ACTIVE - BLOCKED - EXPIRED
    @constraint:String {maxLength: 35}
    string cardStatus?;
    # The date of cancellation
    string cancellationDate?;
};

# CardIssueResponse
public type CardIssueResponse record {
    ScreenHeader header?;
    CardIssueResponseBody body?;
};

public type ScreenHeaderAudit record {
    # Time taken to response by Transact
    @jsondata:Name {value: "T24_time"}
    int:Signed32 t24Time?;
    # Time taken to parse the response by IRIS
    @jsondata:Name {value: "responseParse_time"}
    decimal responseParseTime?;
    # The CURR.NO. of the record
    string versionNumber?;
    # Time taken to parse the request by IRIS
    @jsondata:Name {value: "requestParse_time"}
    decimal requestParseTime?;
};

# Represents the Queries record for the operation: createCardIssue
public type CreateCardIssueQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type CardIssueResponseBody record {
    # Notes to facilitate the use of the Function
    CardIssueBodyNotes[] notes?;
    # The charges or fees for this transaction
    @constraint:String {maxLength: 19}
    string charge?;
    # The reason for the cancellation
    @constraint:String {maxLength: 18}
    string cancellationReason?;
    # The number which is up for display on the credit or debit card
    @constraint:String {maxLength: 35}
    string cardDisplayNumber?;
    # The date an agreement such as an arrangement, product, credit facility or limit is due to expire
    string expiryDate?;
    # Contains the date of issue of the pin
    string pinIssueDate?;
    # Name of the Cardholder/Customer
    CardIssueBodyCardNames[] cardNames?;
    # Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    CardIssueBodyAccountIds[] accountIds?;
    # Identifier of the customer
    @constraint:String {maxLength: 10}
    string customerId?;
    # Identifier of the currency. This is the 3-letter ISO 4217 code of the currency
    @constraint:String {maxLength: 10}
    string currencyId?;
    # The date the item was issued
    string issueDate?;
    # The date on which the charge will be debited to the charge account
    @constraint:String {maxLength: 11}
    string chargeDate?;
    # Current status of the Card and following are the possible statuses are  - CARD.ISSUED - CARD.RETURNED - CARD.SCRAP - CARD.CANCEL - NOT.ACTIVATED - NOT.RECEIVED - ACTIVE - BLOCKED - EXPIRED
    @constraint:String {maxLength: 100}
    string cardStatus?;
    # The date of cancellation
    string cancellationDate?;
};

# Represents the Headers record for the operation: deleteCardIssue
public type DeleteCardIssueHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# Represents the Queries record for the operation: updateCardIssue
public type UpdateCardIssueQueries record {
    # The identifier to indicate if it is set to only validate or not
    @http:Query {name: "validate_only"}
    boolean validateOnly?;
};

public type CardIssueBodyAccountIds record {
    # Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    @constraint:String {maxLength: 16}
    string accountId?;
};

public type CardIssueBodyNotes record {
    # Notes to facilitate the use of the function
    @constraint:String {maxLength: 35}
    string note?;
};

# Represents the Headers record for the operation: updateCardIssue
public type UpdateCardIssueHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# Provides API key configurations needed when communicating with a remote HTTP endpoint.
public type ApiKeysConfig record {|
    string apikey;
|};

# Represents the Headers record for the operation: createCardIssue
public type CreateCardIssueHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type CardIssuesResponseBody CardIssuesResponseBodyInner[];

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Provides Auth configurations needed when communicating with a remote HTTP endpoint.
    http:CredentialsConfig|ApiKeysConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};
